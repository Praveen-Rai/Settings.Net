Desktop app developers would like to make config changes in the configuration files. Rather having an UI. This also holds good for small projects. But also note, that the settings are defined as classes in the application, therefore the point of reference for any detail will always be the setting class. We might support updating values in the config file, but settings cannot be added / deleted / defined in the config file. 

Therefore both way of altering settings are to be supported. 

JSON must be the default storage, if no storage is configured. The name must be <AppName>_Settings.json


Code : 

Point { int X, int Y, int Z  }

Line { Point StartPoint, Point EndPoint }

LineSetting
{
        public override string Description => "Specify the gradient line";

        public override Line Value { get; set; } = new Line();
}

DTO : 

String SettingName = "CustNameSpace.LineSetting"
String Value = {"StartPoint":{"x":0,"y":5},"EndPoint":{"x":10,"y":20}}

JSON :

{
  "CustNameSpace.LineSetting": {
    "StartPoint": {
      "x": 0,
      "y": 5
    },
    "EndPoint": {
      "x": 10,
      "y": 20
    }
  }
}

YAML :

CustNameSpace.LineSetting:
  StartPoint:
    x: 0
    y: 5
  EndPoint:
    x: 10
    y: 20

How about Date, Time datatypes, they aren't natively supported in JSON. They could be serialized to JSON just like a normal class (it has properties for Day, Month, Year, Hour, Minute, Seconds etc.). The key idea behind this library is to use C# classes/objects to represent settings, to make it easier to work in the code. The idea of well-formed display (human readability ) in storage, therefore becomes secondary. Though we are trying to make it as good as possible.
